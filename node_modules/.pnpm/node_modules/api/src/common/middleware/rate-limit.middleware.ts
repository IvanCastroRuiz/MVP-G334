import { Injectable, NestMiddleware } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Request, Response, NextFunction } from 'express';
import { RateLimiterMemory } from 'rate-limiter-flexible';

@Injectable()
export class RateLimitMiddleware implements NestMiddleware {
  private readonly limiter: RateLimiterMemory;

  constructor(private readonly configService: ConfigService) {
    const points = Number(this.configService?.get<string>('RATE_LIMIT_POINTS', '100'));
    const duration = Number(this.configService?.get<string>('RATE_LIMIT_DURATION', '60'));

    this.limiter = new RateLimiterMemory({
      points: Number.isFinite(points) ? points : 100,
      duration: Number.isFinite(duration) ? duration : 60,
    });
  }

  async use(req: Request, res: Response, next: NextFunction) {
    try {
      await this.limiter.consume(req.ip ?? 'unknown');
      next();
    } catch (error: any) {
      const seconds = Math.ceil((error?.msBeforeNext ?? 0) / 1000);
      if (seconds > 0) res.setHeader('Retry-After', String(seconds));
      res.status(429).json({ statusCode: 429, message: 'Too many requests' });
    }
  }
}
